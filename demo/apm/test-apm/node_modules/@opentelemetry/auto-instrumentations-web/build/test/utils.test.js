"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("@opentelemetry/api");
const assert = require("assert");
const sinon = require("sinon");
const src_1 = require("../src");
describe('utils', () => {
    describe('getWebAutoInstrumentations', () => {
        it('should load default instrumentations', () => {
            const instrumentations = src_1.getWebAutoInstrumentations();
            const expectedInstrumentations = [
                '@opentelemetry/instrumentation-document-load',
                '@opentelemetry/instrumentation-fetch',
                '@opentelemetry/instrumentation-user-interaction',
                '@opentelemetry/instrumentation-xml-http-request',
            ];
            assert.strictEqual(instrumentations.length, 4);
            for (let i = 0, j = instrumentations.length; i < j; i++) {
                assert.strictEqual(instrumentations[i].instrumentationName, expectedInstrumentations[i], `Instrumentation ${expectedInstrumentations[i]}, not loaded`);
            }
        });
        it('should use user config', () => {
            const clearTimingResources = true;
            const instrumentations = src_1.getWebAutoInstrumentations({
                '@opentelemetry/instrumentation-xml-http-request': {
                    clearTimingResources,
                },
            });
            const instrumentation = instrumentations.find(instr => instr.instrumentationName ===
                '@opentelemetry/instrumentation-xml-http-request');
            const config = instrumentation._config;
            assert.strictEqual(config.clearTimingResources, clearTimingResources);
        });
        it('should not return disabled instrumentation', () => {
            const instrumentations = src_1.getWebAutoInstrumentations({
                '@opentelemetry/instrumentation-xml-http-request': {
                    enabled: false,
                },
            });
            const instrumentation = instrumentations.find(instr => instr.instrumentationName ===
                '@opentelemetry/instrumentation-xml-http-request');
            assert.strictEqual(instrumentation, undefined);
        });
        it('should show error for none existing instrumentation', () => {
            const spy = sinon.stub(api_1.diag, 'error');
            const name = '@opentelemetry/instrumentation-http2';
            const instrumentations = src_1.getWebAutoInstrumentations({
                // @ts-expect-error verify that wrong name works
                [name]: {
                    enabled: false,
                },
            });
            const instrumentation = instrumentations.find(instr => instr.instrumentationName === name);
            assert.strictEqual(instrumentation, undefined);
            assert.strictEqual(spy.args[0][0], `Provided instrumentation name "${name}" not found`);
        });
    });
});
//# sourceMappingURL=utils.test.js.map